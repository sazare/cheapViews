cheaplogicは、2018年に作成したproverの名前。
dvc_resolution()がぬresolutionを行い, simpleprover()がありったけのproofを作る。

特徴:
1) resolution
   dvcは、Disjoint Variable Conditionと名付けた条件で、resolution開始時に、ふたつのclauseの変数に共通部分がないという条件。
　DVCが成り立てば、resolutionの最初に共通変数のrenameは不要になる。
　resolutionに成功した場合はそのrenameは意味があるが、失敗した場合は無駄になるので、できればrenameをしたくなかった。
 
[方法]
  DVCを満たすようにresolutionを行うには、resolventができたときに、そのresolventの変数が他のclauseの変数と同じにならないようにすればよい。
  そのため、renameはresolutionの最後に行う。

　その前提として、入力clauseは、clauseが異なれば変数名も異なるようにする。
  変数名が衝突しないようにするため、各変数名には、clause id(cid)を付加する。つまり
　元の変数名 x で、それがclause c10で使われていれば、x_c10 のような名前にする。
  resolventを作成した場合、そのresolvent id(rid)を追加する。r11ならば、x_c10r11とする。

[検討]
・変数名が多くなるので、メモリを圧迫するかもしれない。変数名の数自体はどちらの方法でも同じである。
・変数名に元から今までのcid/ridをくっつけていたのは、変数名がもともとどのclauseからきたのかをわかるようにするためだが、必要ないかも。
・DVCが破られる可能性として、親clauseが同じcid/ridを持つ場合がある。
　反証の構造を考えたとき、その証明木はconjの否定のclauseから始まる。同じconjの否定から証明を求める必要はないような気もするが、もしもあるとしたら、そのclauseは-PvPvRの形をしている。
conjの否定自体に、ならばの形の式が含まれる場合を思いつかないが、意味のある例があれば、同じ親clauseからのproofも考えなくてはならず、変数のrenameも必要かもしれない。
  必要ないと思うのだが、今は、renameするように作っているみたい。はずしたい。★
 
　resolutionに失敗した回数と成功した回数を調べてみると、Axiomによって同じような数だったり、大きく違っていたりした。数の上ではどちらが正解ともいえない。

2) 記号の名前
・変数名は上記のように、cid/ridを付加するようにした。
・cidは、元のファイルに書かれた順番。最初の1個をconjの否定の1つと考えている。
　conjの否定が複数になることはあまり考慮しておらず、conjの否定の残りのclauseはaxiomに含める想定。
　conjの否定が複数になるということは、個々のconjの否定をすべて独立して反証すればいいということなので、この方法でいいのかどうかまだよく考えていない。
　conjの否定のclause集合自体が無矛盾(ここでは矛盾の証明ができないという意味)であると仮定すると、独立していようがいまいが反証プロセスは同じになるような気がする。
・リテラルについては、入力clauseに出てくるリテラルのインスタンスしか発生しないので、リテラルを区別するには、入力時/開始時のリテラルに通し番号をつければいいと考えた。
  そうでない方法としては、cid/rid+clause内部の通し番号なども考えられるが、それはしなかった。

　最初のリテラルの番号をリテラルid(lid)として、L10のようにつける。どのリテラルを使ったかの痕跡とするため、resolventのリテラルにはlidとして最初のlidにridをつける。つまりL10_R11。
これちらは履歴を残さず、今のridのみになる。


3. substitutionとbinding
substitutionは{x_i<-t_i}という形だが、各clauseは変数のbindingをもっているので[x_1,x_2,..]があるから、代入は[t_1,t_2,...]の部分だけにした。

変数リストを持ってまわらなくてはならないのが、やや面倒だが、それはいずれにせよ必要なので、これでよいと考えた。本当にいずれにせよ必要なのかどうかは再検討したほうがいいかも。

これによって、apply(substtitutionの適用)は、apply(vars, expr, terms)の形になっている。varsがbinddingであるという意味で1番目にあり、substitutionは右からかけたかったので、substitutionの片割れであるermsはtermの右側になっている。

substitutionにsubstitutionを適用するmerge()は使っていないはずだが、merge(vars, termlist, termlist)という形になり、applyと同じ形になるので気に入っている。
実験中の、binding, substitutionをDictにする方式は、これとは逆に{x<-t}を固まりで扱う方法だが、それも面白い。bindingは{x<-x}というDictになる。







